/* automatically generated by rust-bindgen 0.59.2 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_pctype as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_mb_cur_max as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_lc_codepage as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).locinfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).mbcinfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Wchar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Byte as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._State as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __threadid() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __threadhandle() -> usize;
}
pub const MSP_AUDIO_SAMPLE_INIT: ::std::os::raw::c_int = 0;
pub const MSP_AUDIO_SAMPLE_FIRST: ::std::os::raw::c_int = 1;
pub const MSP_AUDIO_SAMPLE_CONTINUE: ::std::os::raw::c_int = 2;
pub const MSP_AUDIO_SAMPLE_LAST: ::std::os::raw::c_int = 4;
#[doc = "  MSPSampleStatus indicates how the sample buffer should be handled"]
#[doc = "  MSP_AUDIO_SAMPLE_FIRST\t\t- The sample buffer is the start of audio"]
#[doc = "\t\t\t\t\t\t\t\t  If recognizer was already recognizing, it will discard"]
#[doc = "\t\t\t\t\t\t\t\t  audio received to date and re-start the recognition"]
#[doc = "  MSP_AUDIO_SAMPLE_CONTINUE\t- The sample buffer is continuing audio"]
#[doc = "  MSP_AUDIO_SAMPLE_LAST\t\t- The sample buffer is the end of audio"]
#[doc = "\t\t\t\t\t\t\t\t  The recognizer will cease processing audio and"]
#[doc = "\t\t\t\t\t\t\t\t  return results"]
#[doc = "  Note that sample statii can be combined; for example, for file-based input"]
#[doc = "  the entire file can be written with SAMPLE_FIRST | SAMPLE_LAST as the"]
#[doc = "  status."]
#[doc = "  Other flags may be added in future to indicate other special audio"]
#[doc = "  conditions such as the presence of AGC"]
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
pub const MSP_REC_STATUS_SUCCESS: ::std::os::raw::c_int = 0;
pub const MSP_REC_STATUS_NO_MATCH: ::std::os::raw::c_int = 1;
pub const MSP_REC_STATUS_INCOMPLETE: ::std::os::raw::c_int = 2;
pub const MSP_REC_STATUS_NON_SPEECH_DETECTED: ::std::os::raw::c_int = 3;
pub const MSP_REC_STATUS_SPEECH_DETECTED: ::std::os::raw::c_int = 4;
pub const MSP_REC_STATUS_COMPLETE: ::std::os::raw::c_int = 5;
pub const MSP_REC_STATUS_MAX_CPU_TIME: ::std::os::raw::c_int = 6;
pub const MSP_REC_STATUS_MAX_SPEECH: ::std::os::raw::c_int = 7;
pub const MSP_REC_STATUS_STOPPED: ::std::os::raw::c_int = 8;
pub const MSP_REC_STATUS_REJECTED: ::std::os::raw::c_int = 9;
pub const MSP_REC_STATUS_NO_SPEECH_FOUND: ::std::os::raw::c_int = 10;
pub const MSP_REC_STATUS_FAILURE: ::std::os::raw::c_int = 1;
pub type _bindgen_ty_2 = ::std::os::raw::c_int;
pub const MSP_EP_LOOKING_FOR_SPEECH: ::std::os::raw::c_int = 0;
pub const MSP_EP_IN_SPEECH: ::std::os::raw::c_int = 1;
pub const MSP_EP_AFTER_SPEECH: ::std::os::raw::c_int = 3;
pub const MSP_EP_TIMEOUT: ::std::os::raw::c_int = 4;
pub const MSP_EP_ERROR: ::std::os::raw::c_int = 5;
pub const MSP_EP_MAX_SPEECH: ::std::os::raw::c_int = 6;
pub const MSP_EP_IDLE: ::std::os::raw::c_int = 7;
#[doc = " The enumeration MSPepState contains the current endpointer state"]
#[doc = "  MSP_EP_LOOKING_FOR_SPEECH\t- Have not yet found the beginning of speech"]
#[doc = "  MSP_EP_IN_SPEECH\t\t\t- Have found the beginning, but not the end of speech"]
#[doc = "  MSP_EP_AFTER_SPEECH\t\t\t- Have found the beginning and end of speech"]
#[doc = "  MSP_EP_TIMEOUT\t\t\t\t- Have not found any audio till timeout"]
#[doc = "  MSP_EP_ERROR\t\t\t\t- The endpointer has encountered a serious error"]
#[doc = "  MSP_EP_MAX_SPEECH\t\t\t- Have arrive the max size of speech"]
pub type _bindgen_ty_3 = ::std::os::raw::c_int;
pub const MSP_TTS_FLAG_STILL_HAVE_DATA: ::std::os::raw::c_int = 1;
pub const MSP_TTS_FLAG_DATA_END: ::std::os::raw::c_int = 2;
pub const MSP_TTS_FLAG_CMD_CANCELED: ::std::os::raw::c_int = 4;
pub type _bindgen_ty_4 = ::std::os::raw::c_int;
pub const MSP_HCR_DATA_FIRST: ::std::os::raw::c_int = 1;
pub const MSP_HCR_DATA_CONTINUE: ::std::os::raw::c_int = 2;
pub const MSP_HCR_DATA_END: ::std::os::raw::c_int = 4;
pub type _bindgen_ty_5 = ::std::os::raw::c_int;
pub const MSP_IVW_MSG_WAKEUP: ::std::os::raw::c_int = 1;
pub const MSP_IVW_MSG_ERROR: ::std::os::raw::c_int = 2;
pub const MSP_IVW_MSG_ISR_RESULT: ::std::os::raw::c_int = 3;
pub const MSP_IVW_MSG_ISR_EPS: ::std::os::raw::c_int = 4;
pub const MSP_IVW_MSG_VOLUME: ::std::os::raw::c_int = 5;
pub const MSP_IVW_MSG_ENROLL: ::std::os::raw::c_int = 6;
pub const MSP_IVW_MSG_RESET: ::std::os::raw::c_int = 7;
pub type _bindgen_ty_6 = ::std::os::raw::c_int;
pub const MSP_DATA_SAMPLE_INIT: ::std::os::raw::c_int = 0;
pub const MSP_DATA_SAMPLE_FIRST: ::std::os::raw::c_int = 1;
pub const MSP_DATA_SAMPLE_CONTINUE: ::std::os::raw::c_int = 2;
pub const MSP_DATA_SAMPLE_LAST: ::std::os::raw::c_int = 4;
pub type _bindgen_ty_7 = ::std::os::raw::c_int;
extern "C" {
    #[doc = " @fn\t\tWchar2Mbytes"]
    #[doc = " @brief\twchar to mbytes"]
    #[doc = ""]
    #[doc = "  User login."]
    #[doc = ""]
    #[doc = " @return\tint MSPAPI\t\t\t\t- Return 0 in success, otherwise return error code."]
    #[doc = " @param\tconst wchar_t* wcstr\t- [in] Null-terminated source string(wchar_t *)."]
    #[doc = " @param\tchar* mbstr\t\t\t\t- [in] Destination string(char *)."]
    #[doc = " @param   int len\t\t\t\t\t- [in] The maximum number of bytes that can be stored in the multibyte output string."]
    #[doc = " @see"]
    pub fn Wchar2Mbytes(wcstr: *const wchar_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @fn\t\tMbytes2Wchar"]
    #[doc = " @brief\tmbytes to wchar"]
    #[doc = ""]
    #[doc = "  User login."]
    #[doc = ""]
    #[doc = " @return\tint MSPAPI\t\t\t\t- Return 0 in success, otherwise return error code."]
    #[doc = " @param\tconst char* mbstr\t\t- [in] Null-terminated source string(char *)."]
    #[doc = " @param\twchar_t* wcstr\t\t\t- [in] Destination string(wchar_t *)."]
    #[doc = " @param   int wlen\t\t\t\t- [in] The maximum number of multibyte characters to convert."]
    #[doc = " @see"]
    pub fn Mbytes2Wchar(mbstr: *const ::std::os::raw::c_char) -> *mut wchar_t;
}
extern "C" {
    #[doc = " @fn\t\tMSPLogin"]
    #[doc = " @brief\tuser login interface"]
    #[doc = ""]
    #[doc = "  User login."]
    #[doc = ""]
    #[doc = " @return\tint MSPAPI\t\t\t- Return 0 in success, otherwise return error code."]
    #[doc = " @param\tconst char* usr\t\t- [in] user name."]
    #[doc = " @param\tconst char* pwd\t\t- [in] password."]
    #[doc = " @param\tconst char* params\t- [in] parameters when user login."]
    #[doc = " @see"]
    pub fn MSPLogin(
        usr: *const ::std::os::raw::c_char,
        pwd: *const ::std::os::raw::c_char,
        params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type Proc_MSPLogin = ::std::option::Option<
    unsafe extern "C" fn(
        usr: *const ::std::os::raw::c_char,
        pwd: *const ::std::os::raw::c_char,
        params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn MSPLoginW(
        usr: *const wchar_t,
        pwd: *const wchar_t,
        params: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
pub type Proc_MSPLoginW = ::std::option::Option<
    unsafe extern "C" fn(
        usr: *const wchar_t,
        pwd: *const wchar_t,
        params: *const wchar_t,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[doc = " @fn\t\tMSPLogout"]
    #[doc = " @brief\tuser logout interface"]
    #[doc = ""]
    #[doc = "  User logout"]
    #[doc = ""]
    #[doc = " @return\tint MSPAPI\t\t\t- Return 0 in success, otherwise return error code."]
    #[doc = " @see"]
    pub fn MSPLogout() -> ::std::os::raw::c_int;
}
pub type Proc_MSPLogout = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
extern "C" {
    pub fn MSPLogoutW() -> ::std::os::raw::c_int;
}
pub type Proc_MSPLogoutW = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
extern "C" {
    #[doc = " @fn\t\tMSPUpload"]
    #[doc = " @brief\tUpload User Specific Data"]
    #[doc = ""]
    #[doc = "  Upload data such as user config, custom grammar, etc."]
    #[doc = ""]
    #[doc = " @return\tint MSPAPI\t\t\t\t- Return 0 in success, otherwise return error code."]
    #[doc = " @param\tconst char* dataName\t- [in] data name, should be unique to diff other data."]
    #[doc = " @param\tconst char* params\t\t- [in] parameters about uploading data."]
    #[doc = " @param\tconst char* dataID\t\t- [in] id of the data to be operated."]
    #[doc = " @see"]
    pub fn MSPUpload(
        dataName: *const ::std::os::raw::c_char,
        params: *const ::std::os::raw::c_char,
        dataID: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type Proc_MSPUpload = ::std::option::Option<
    unsafe extern "C" fn(
        dataName: *const ::std::os::raw::c_char,
        params: *const ::std::os::raw::c_char,
        dataID: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " @fn\t\tMSPDownload"]
#[doc = " @brief\tDownload User Specific Data"]
#[doc = ""]
#[doc = "  Download data such as user config, etc."]
#[doc = ""]
#[doc = " @return\tint MSPAPI\t\t\t\t- Return 0 in success, otherwise return error code."]
#[doc = " @param\tconst char* params\t\t- [in] parameters about data to be downloaded."]
#[doc = " @see"]
pub type DownloadStatusCB = ::std::option::Option<
    unsafe extern "C" fn(
        errorCode: ::std::os::raw::c_int,
        param1: ::std::os::raw::c_long,
        param2: *const ::std::os::raw::c_void,
        userData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type DownloadResultCB = ::std::option::Option<
    unsafe extern "C" fn(
        data: *const ::std::os::raw::c_void,
        dataLen: ::std::os::raw::c_long,
        userData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn MSPDownload(
        dataName: *const ::std::os::raw::c_char,
        params: *const ::std::os::raw::c_char,
        statusCb: DownloadStatusCB,
        resultCb: DownloadResultCB,
        userData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type Proc_MSPDownload = ::std::option::Option<
    unsafe extern "C" fn(
        dataName: *const ::std::os::raw::c_char,
        params: *const ::std::os::raw::c_char,
        statusCb: DownloadStatusCB,
        resultCb: DownloadResultCB,
        userData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn MSPDownloadW(
        wdataName: *const wchar_t,
        wparams: *const wchar_t,
        statusCb: DownloadStatusCB,
        resultCb: DownloadResultCB,
        userData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type Proc_MSPDownloadW = ::std::option::Option<
    unsafe extern "C" fn(
        wdataName: *const wchar_t,
        wparams: *const wchar_t,
        statusCb: DownloadStatusCB,
        resultCb: DownloadResultCB,
        userData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[doc = " @fn\t\tMSPAppendData"]
    #[doc = " @brief\tAppend Data."]
    #[doc = ""]
    #[doc = "  Write data to msc, such as data to be uploaded, searching text, etc."]
    #[doc = ""]
    #[doc = " @return\tint MSPAPI\t\t\t\t\t- Return 0 in success, otherwise return error code."]
    #[doc = " @param\tvoid* data\t\t\t\t\t- [in] the data buffer pointer, data could be binary."]
    #[doc = " @param\tunsigned int dataLen\t\t- [in] length of data."]
    #[doc = " @param\tunsigned int dataStatus\t\t- [in] data status, 2: first or continuous, 4: last."]
    #[doc = " @see"]
    pub fn MSPAppendData(
        data: *mut ::std::os::raw::c_void,
        dataLen: ::std::os::raw::c_uint,
        dataStatus: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type Proc_MSPAppendData = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ::std::os::raw::c_void,
        dataLen: ::std::os::raw::c_uint,
        dataStatus: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[doc = " @fn\t\tMSPGetResult"]
    #[doc = " @brief\tGet Result"]
    #[doc = ""]
    #[doc = "  Get result of uploading, downloading or searching, etc."]
    #[doc = ""]
    #[doc = " @return\tconst char* MSPAPI\t\t- Return result of uploading, downloading or searching, etc."]
    #[doc = " @param\tint* rsltLen\t\t\t- [out] Length of result returned."]
    #[doc = " @param\tint* rsltStatus\t\t\t- [out] Status of result returned."]
    #[doc = " @param\tint* errorCode\t\t\t- [out] Return 0 in success, otherwise return error code."]
    #[doc = " @see"]
    pub fn MSPGetResult(
        rsltLen: *mut ::std::os::raw::c_uint,
        rsltStatus: *mut ::std::os::raw::c_int,
        errorCode: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
pub type Proc_MSPGetResult = ::std::option::Option<
    unsafe extern "C" fn(
        rsltLen: *mut ::std::os::raw::c_uint,
        rsltStatus: *mut ::std::os::raw::c_int,
        errorCode: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char,
>;
extern "C" {
    #[doc = " @fn\t\tMSPSetParam"]
    #[doc = " @brief\tset params of msc"]
    #[doc = ""]
    #[doc = "  set param of msc"]
    #[doc = ""]
    #[doc = " @return\tint\t- Return 0 if success, otherwise return errcode."]
    #[doc = " @param\tconst char* paramName\t- [in] param name."]
    #[doc = " @param\tconst char* paramValue\t- [in] param value"]
    #[doc = " @see"]
    pub fn MSPSetParam(
        paramName: *const ::std::os::raw::c_char,
        paramValue: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type Proc_MSPSetParam = ::std::option::Option<
    unsafe extern "C" fn(
        paramName: *const ::std::os::raw::c_char,
        paramValue: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[doc = " @fn\t\tMSPGetParam"]
    #[doc = " @brief\tget params of msc"]
    #[doc = ""]
    #[doc = "  get param of msc"]
    #[doc = ""]
    #[doc = " @return\tint\t- Return 0 if success, otherwise return errcode."]
    #[doc = " @param\tconst char* paramName\t- [in] param name."]
    #[doc = " @param\tconst char* paramValue\t- [out] param value"]
    #[doc = " @param\tconst char* valueLen\t- [in/out] param value (buffer) length"]
    #[doc = " @see"]
    pub fn MSPGetParam(
        paramName: *const ::std::os::raw::c_char,
        paramValue: *mut ::std::os::raw::c_char,
        valueLen: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type Proc_MSPGetParam = ::std::option::Option<
    unsafe extern "C" fn(
        paramName: *const ::std::os::raw::c_char,
        paramValue: *mut ::std::os::raw::c_char,
        valueLen: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[doc = " @fn\t\tMSPUploadData"]
    #[doc = " @brief\tUpload User Specific Data"]
    #[doc = ""]
    #[doc = "  Upload data such as user config, custom grammar, etc."]
    #[doc = ""]
    #[doc = " @return\tconst char* MSPAPI\t\t- data id returned by Server, used for special command."]
    #[doc = " @param\tconst char* dataName\t- [in] data name, should be unique to diff other data."]
    #[doc = " @param\tvoid* data\t\t\t\t- [in] the data buffer pointer, data could be binary."]
    #[doc = " @param\tunsigned int dataLen\t- [in] length of data."]
    #[doc = " @param\tconst char* params\t\t- [in] parameters about uploading data."]
    #[doc = " @param\tint* errorCode\t\t\t- [out] Return 0 in success, otherwise return error code."]
    #[doc = " @see"]
    pub fn MSPUploadData(
        dataName: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
        dataLen: ::std::os::raw::c_uint,
        params: *const ::std::os::raw::c_char,
        errorCode: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
pub type Proc_MSPUploadData = ::std::option::Option<
    unsafe extern "C" fn(
        dataName: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
        dataLen: ::std::os::raw::c_uint,
        params: *const ::std::os::raw::c_char,
        errorCode: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char,
>;
extern "C" {
    #[doc = " @fn\t\tMSPDownloadData"]
    #[doc = " @brief\tDownload User Specific Data"]
    #[doc = ""]
    #[doc = "  Download data such as user config, etc."]
    #[doc = ""]
    #[doc = " @return\tconst void*\tMSPAPI\t\t- received data buffer pointer, data could be binary, NULL if failed or data does not exsit."]
    #[doc = " @param\tconst char* params\t\t- [in] parameters about data to be downloaded."]
    #[doc = " @param\tunsigned int* dataLen\t- [out] length of received data."]
    #[doc = " @param\tint* errorCode\t\t\t- [out] Return 0 in success, otherwise return error code."]
    #[doc = " @see"]
    pub fn MSPDownloadData(
        params: *const ::std::os::raw::c_char,
        dataLen: *mut ::std::os::raw::c_uint,
        errorCode: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_void;
}
pub type Proc_MSPDownloadData = ::std::option::Option<
    unsafe extern "C" fn(
        params: *const ::std::os::raw::c_char,
        dataLen: *mut ::std::os::raw::c_uint,
        errorCode: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_void,
>;
extern "C" {
    pub fn MSPDownloadDataW(
        params: *const wchar_t,
        dataLen: *mut ::std::os::raw::c_uint,
        errorCode: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_void;
}
pub type Proc_MSPDownloadDataW = ::std::option::Option<
    unsafe extern "C" fn(
        params: *const wchar_t,
        dataLen: *mut ::std::os::raw::c_uint,
        errorCode: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_void,
>;
extern "C" {
    #[doc = " @fn\t\tMSPSearch"]
    #[doc = " @brief\tSearch text for result"]
    #[doc = ""]
    #[doc = "  Search text content, and got text result"]
    #[doc = ""]
    #[doc = " @return\tconst void*\tMSPAPI\t\t- received data buffer pointer, data could be binary, NULL if failed or data does not exsit."]
    #[doc = " @param\tconst char* params\t\t- [in] parameters about data to be downloaded."]
    #[doc = " @param\tunsigned int* dataLen\t- [out] length of received data."]
    #[doc = " @param\tint* errorCode\t\t\t- [out] Return 0 in success, otherwise return error code."]
    #[doc = " @see"]
    pub fn MSPSearch(
        params: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
        dataLen: *mut ::std::os::raw::c_uint,
        errorCode: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
pub type Proc_MSPSearch = ::std::option::Option<
    unsafe extern "C" fn(
        params: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
        dataLen: *mut ::std::os::raw::c_uint,
        errorCode: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char,
>;
pub type NLPSearchCB = ::std::option::Option<
    unsafe extern "C" fn(
        sessionID: *const ::std::os::raw::c_char,
        errorCode: ::std::os::raw::c_int,
        status: ::std::os::raw::c_int,
        result: *const ::std::os::raw::c_void,
        rsltLen: ::std::os::raw::c_long,
        userData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn MSPNlpSearch(
        params: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
        textLen: ::std::os::raw::c_uint,
        errorCode: *mut ::std::os::raw::c_int,
        callback: NLPSearchCB,
        userData: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
pub type Proc_MSPNlpSearch = ::std::option::Option<
    unsafe extern "C" fn(
        params: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
        textLen: ::std::os::raw::c_uint,
        errorCode: *mut ::std::os::raw::c_int,
        callback: NLPSearchCB,
        userData: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char,
>;
extern "C" {
    pub fn MSPNlpSchCancel(
        sessionID: *const ::std::os::raw::c_char,
        hints: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[doc = " @fn\t\tMSPRegisterNotify"]
#[doc = " @brief\tRegister a Callback"]
#[doc = ""]
#[doc = "  Register a Callback"]
#[doc = ""]
#[doc = " @return\tint                     -"]
#[doc = " @param\tmsp_status_ntf_handler statusCb\t\t- [in] notify handler"]
#[doc = " @param\tvoid *userData                   \t- [in] userData"]
#[doc = " @see"]
pub type msp_status_ntf_handler = ::std::option::Option<
    unsafe extern "C" fn(
        type_: ::std::os::raw::c_int,
        status: ::std::os::raw::c_int,
        param1: ::std::os::raw::c_int,
        param2: *const ::std::os::raw::c_void,
        userData: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn MSPRegisterNotify(
        statusCb: msp_status_ntf_handler,
        userData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type Proc_MSPRegisterNotify = ::std::option::Option<
    unsafe extern "C" fn(
        statusCb: msp_status_ntf_handler,
        userData: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char,
>;
extern "C" {
    #[doc = " @fn\t\tMSPGetVersion"]
    #[doc = " @brief\tGet version of MSC or Local Engine"]
    #[doc = ""]
    #[doc = " Get version of MSC or Local Engine"]
    #[doc = ""]
    #[doc = " @return\tconst char * MSPAPI\t\t- Return version value if success, NULL if fail."]
    #[doc = " @param\tconst char *verName\t\t- [in] version name, could be \"msc\", \"aitalk\", \"aisound\", \"ivw\"."]
    #[doc = " @param\tint *errorCode\t\t\t- [out] Return 0 in success, otherwise return error code."]
    #[doc = " @see"]
    pub fn MSPGetVersion(
        verName: *const ::std::os::raw::c_char,
        errorCode: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
pub type Proc_MSPGetVersion = ::std::option::Option<
    unsafe extern "C" fn(
        verName: *const ::std::os::raw::c_char,
        errorCode: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char,
>;
pub const MSP_SUCCESS: ::std::os::raw::c_int = 0;
pub const MSP_ERROR_FAIL: ::std::os::raw::c_int = -1;
pub const MSP_ERROR_EXCEPTION: ::std::os::raw::c_int = -2;
pub const MSP_ERROR_GENERAL: ::std::os::raw::c_int = 10100;
pub const MSP_ERROR_OUT_OF_MEMORY: ::std::os::raw::c_int = 10101;
pub const MSP_ERROR_FILE_NOT_FOUND: ::std::os::raw::c_int = 10102;
pub const MSP_ERROR_NOT_SUPPORT: ::std::os::raw::c_int = 10103;
pub const MSP_ERROR_NOT_IMPLEMENT: ::std::os::raw::c_int = 10104;
pub const MSP_ERROR_ACCESS: ::std::os::raw::c_int = 10105;
pub const MSP_ERROR_INVALID_PARA: ::std::os::raw::c_int = 10106;
pub const MSP_ERROR_INVALID_PARA_VALUE: ::std::os::raw::c_int = 10107;
pub const MSP_ERROR_INVALID_HANDLE: ::std::os::raw::c_int = 10108;
pub const MSP_ERROR_INVALID_DATA: ::std::os::raw::c_int = 10109;
pub const MSP_ERROR_NO_LICENSE: ::std::os::raw::c_int = 10110;
pub const MSP_ERROR_NOT_INIT: ::std::os::raw::c_int = 10111;
pub const MSP_ERROR_NULL_HANDLE: ::std::os::raw::c_int = 10112;
pub const MSP_ERROR_OVERFLOW: ::std::os::raw::c_int = 10113;
pub const MSP_ERROR_TIME_OUT: ::std::os::raw::c_int = 10114;
pub const MSP_ERROR_OPEN_FILE: ::std::os::raw::c_int = 10115;
pub const MSP_ERROR_NOT_FOUND: ::std::os::raw::c_int = 10116;
pub const MSP_ERROR_NO_ENOUGH_BUFFER: ::std::os::raw::c_int = 10117;
pub const MSP_ERROR_NO_DATA: ::std::os::raw::c_int = 10118;
pub const MSP_ERROR_NO_MORE_DATA: ::std::os::raw::c_int = 10119;
pub const MSP_ERROR_NO_RESPONSE_DATA: ::std::os::raw::c_int = 10120;
pub const MSP_ERROR_ALREADY_EXIST: ::std::os::raw::c_int = 10121;
pub const MSP_ERROR_LOAD_MODULE: ::std::os::raw::c_int = 10122;
pub const MSP_ERROR_BUSY: ::std::os::raw::c_int = 10123;
pub const MSP_ERROR_INVALID_CONFIG: ::std::os::raw::c_int = 10124;
pub const MSP_ERROR_VERSION_CHECK: ::std::os::raw::c_int = 10125;
pub const MSP_ERROR_CANCELED: ::std::os::raw::c_int = 10126;
pub const MSP_ERROR_INVALID_MEDIA_TYPE: ::std::os::raw::c_int = 10127;
pub const MSP_ERROR_CONFIG_INITIALIZE: ::std::os::raw::c_int = 10128;
pub const MSP_ERROR_CREATE_HANDLE: ::std::os::raw::c_int = 10129;
pub const MSP_ERROR_CODING_LIB_NOT_LOAD: ::std::os::raw::c_int = 10130;
pub const MSP_ERROR_USER_CANCELLED: ::std::os::raw::c_int = 10131;
pub const MSP_ERROR_INVALID_OPERATION: ::std::os::raw::c_int = 10132;
pub const MSP_ERROR_MESSAGE_NOT_COMPLETE: ::std::os::raw::c_int = 10133;
pub const MSP_ERROR_NO_EID: ::std::os::raw::c_int = 10134;
pub const MSP_ERROE_OVER_REQ: ::std::os::raw::c_int = 10135;
pub const MSP_ERROR_USER_ACTIVE_ABORT: ::std::os::raw::c_int = 10136;
pub const MSP_ERROR_BUSY_GRMBUILDING: ::std::os::raw::c_int = 10137;
pub const MSP_ERROR_BUSY_LEXUPDATING: ::std::os::raw::c_int = 10138;
pub const MSP_ERROR_SESSION_RESET: ::std::os::raw::c_int = 10139;
pub const MSP_ERROR_BOS_TIMEOUT: ::std::os::raw::c_int = 10140;
pub const MSP_ERROR_STREAM_FILTER: ::std::os::raw::c_int = 10141;
pub const MSP_ERROR_STREAM_CLEAR: ::std::os::raw::c_int = 10142;
pub const MSP_ERROR_NET_GENERAL: ::std::os::raw::c_int = 10200;
pub const MSP_ERROR_NET_OPENSOCK: ::std::os::raw::c_int = 10201;
pub const MSP_ERROR_NET_CONNECTSOCK: ::std::os::raw::c_int = 10202;
pub const MSP_ERROR_NET_ACCEPTSOCK: ::std::os::raw::c_int = 10203;
pub const MSP_ERROR_NET_SENDSOCK: ::std::os::raw::c_int = 10204;
pub const MSP_ERROR_NET_RECVSOCK: ::std::os::raw::c_int = 10205;
pub const MSP_ERROR_NET_INVALIDSOCK: ::std::os::raw::c_int = 10206;
pub const MSP_ERROR_NET_BADADDRESS: ::std::os::raw::c_int = 10207;
pub const MSP_ERROR_NET_BINDSEQUENCE: ::std::os::raw::c_int = 10208;
pub const MSP_ERROR_NET_NOTOPENSOCK: ::std::os::raw::c_int = 10209;
pub const MSP_ERROR_NET_NOTBIND: ::std::os::raw::c_int = 10210;
pub const MSP_ERROR_NET_NOTLISTEN: ::std::os::raw::c_int = 10211;
pub const MSP_ERROR_NET_CONNECTCLOSE: ::std::os::raw::c_int = 10212;
pub const MSP_ERROR_NET_NOTDGRAMSOCK: ::std::os::raw::c_int = 10213;
pub const MSP_ERROR_NET_DNS: ::std::os::raw::c_int = 10214;
pub const MSP_ERROR_NET_INIT: ::std::os::raw::c_int = 10215;
pub const MSP_ERROR_NFL_INNER_ERROR: ::std::os::raw::c_int = 10216;
pub const MSP_ERROR_MSS_TIME_OUT: ::std::os::raw::c_int = 10217;
pub const MSP_ERROT_CLIENT_TIME_OUT: ::std::os::raw::c_int = 10218;
pub const MSP_ERROR_CLIENT_CLOSE: ::std::os::raw::c_int = 10219;
pub const MSP_ERROR_CLIENT_AREA_CHANGE: ::std::os::raw::c_int = 10220;
pub const MSP_ERROR_NET_SSL_HANDSHAKE: ::std::os::raw::c_int = 10221;
pub const MSP_ERROR_NET_INVALID_ROOT_CERT: ::std::os::raw::c_int = 10222;
pub const MSP_ERROR_NET_INVALID_CLIENT_CERT: ::std::os::raw::c_int = 10223;
pub const MSP_ERROR_NET_INVALID_SERVER_CERT: ::std::os::raw::c_int = 10224;
pub const MSP_ERROR_NET_INVALID_KEY: ::std::os::raw::c_int = 10225;
pub const MSP_ERROR_NET_CERT_VERIFY_FAILED: ::std::os::raw::c_int = 10226;
pub const MSP_ERROR_NET_WOULDBLOCK: ::std::os::raw::c_int = 10227;
pub const MSP_ERROR_NET_NOTBLOCK: ::std::os::raw::c_int = 10228;
pub const MSP_ERROR_MSG_GENERAL: ::std::os::raw::c_int = 10300;
pub const MSP_ERROR_MSG_PARSE_ERROR: ::std::os::raw::c_int = 10301;
pub const MSP_ERROR_MSG_BUILD_ERROR: ::std::os::raw::c_int = 10302;
pub const MSP_ERROR_MSG_PARAM_ERROR: ::std::os::raw::c_int = 10303;
pub const MSP_ERROR_MSG_CONTENT_EMPTY: ::std::os::raw::c_int = 10304;
pub const MSP_ERROR_MSG_INVALID_CONTENT_TYPE: ::std::os::raw::c_int = 10305;
pub const MSP_ERROR_MSG_INVALID_CONTENT_LENGTH: ::std::os::raw::c_int = 10306;
pub const MSP_ERROR_MSG_INVALID_CONTENT_ENCODE: ::std::os::raw::c_int = 10307;
pub const MSP_ERROR_MSG_INVALID_KEY: ::std::os::raw::c_int = 10308;
pub const MSP_ERROR_MSG_KEY_EMPTY: ::std::os::raw::c_int = 10309;
pub const MSP_ERROR_MSG_SESSION_ID_EMPTY: ::std::os::raw::c_int = 10310;
pub const MSP_ERROR_MSG_LOGIN_ID_EMPTY: ::std::os::raw::c_int = 10311;
pub const MSP_ERROR_MSG_SYNC_ID_EMPTY: ::std::os::raw::c_int = 10312;
pub const MSP_ERROR_MSG_APP_ID_EMPTY: ::std::os::raw::c_int = 10313;
pub const MSP_ERROR_MSG_EXTERN_ID_EMPTY: ::std::os::raw::c_int = 10314;
pub const MSP_ERROR_MSG_INVALID_CMD: ::std::os::raw::c_int = 10315;
pub const MSP_ERROR_MSG_INVALID_SUBJECT: ::std::os::raw::c_int = 10316;
pub const MSP_ERROR_MSG_INVALID_VERSION: ::std::os::raw::c_int = 10317;
pub const MSP_ERROR_MSG_NO_CMD: ::std::os::raw::c_int = 10318;
pub const MSP_ERROR_MSG_NO_SUBJECT: ::std::os::raw::c_int = 10319;
pub const MSP_ERROR_MSG_NO_VERSION: ::std::os::raw::c_int = 10320;
pub const MSP_ERROR_MSG_MSSP_EMPTY: ::std::os::raw::c_int = 10321;
pub const MSP_ERROR_MSG_NEW_RESPONSE: ::std::os::raw::c_int = 10322;
pub const MSP_ERROR_MSG_NEW_CONTENT: ::std::os::raw::c_int = 10323;
pub const MSP_ERROR_MSG_INVALID_SESSION_ID: ::std::os::raw::c_int = 10324;
pub const MSP_ERROR_MSG_INVALID_CONTENT: ::std::os::raw::c_int = 10325;
pub const MSP_ERROR_DB_GENERAL: ::std::os::raw::c_int = 10400;
pub const MSP_ERROR_DB_EXCEPTION: ::std::os::raw::c_int = 10401;
pub const MSP_ERROR_DB_NO_RESULT: ::std::os::raw::c_int = 10402;
pub const MSP_ERROR_DB_INVALID_USER: ::std::os::raw::c_int = 10403;
pub const MSP_ERROR_DB_INVALID_PWD: ::std::os::raw::c_int = 10404;
pub const MSP_ERROR_DB_CONNECT: ::std::os::raw::c_int = 10405;
pub const MSP_ERROR_DB_INVALID_SQL: ::std::os::raw::c_int = 10406;
pub const MSP_ERROR_DB_INVALID_APPID: ::std::os::raw::c_int = 10407;
pub const MSP_ERROR_DB_NO_UID: ::std::os::raw::c_int = 10408;
pub const MSP_ERROR_RES_GENERAL: ::std::os::raw::c_int = 10500;
pub const MSP_ERROR_RES_LOAD: ::std::os::raw::c_int = 10501;
pub const MSP_ERROR_RES_FREE: ::std::os::raw::c_int = 10502;
pub const MSP_ERROR_RES_MISSING: ::std::os::raw::c_int = 10503;
pub const MSP_ERROR_RES_INVALID_NAME: ::std::os::raw::c_int = 10504;
pub const MSP_ERROR_RES_INVALID_ID: ::std::os::raw::c_int = 10505;
pub const MSP_ERROR_RES_INVALID_IMG: ::std::os::raw::c_int = 10506;
pub const MSP_ERROR_RES_WRITE: ::std::os::raw::c_int = 10507;
pub const MSP_ERROR_RES_LEAK: ::std::os::raw::c_int = 10508;
pub const MSP_ERROR_RES_HEAD: ::std::os::raw::c_int = 10509;
pub const MSP_ERROR_RES_DATA: ::std::os::raw::c_int = 10510;
pub const MSP_ERROR_RES_SKIP: ::std::os::raw::c_int = 10511;
pub const MSP_ERROR_TTS_GENERAL: ::std::os::raw::c_int = 10600;
pub const MSP_ERROR_TTS_TEXTEND: ::std::os::raw::c_int = 10601;
pub const MSP_ERROR_TTS_TEXT_EMPTY: ::std::os::raw::c_int = 10602;
pub const MSP_ERROR_TTS_LTTS_ERROR: ::std::os::raw::c_int = 10603;
pub const MSP_ERROR_REC_GENERAL: ::std::os::raw::c_int = 10700;
pub const MSP_ERROR_REC_INACTIVE: ::std::os::raw::c_int = 10701;
pub const MSP_ERROR_REC_GRAMMAR_ERROR: ::std::os::raw::c_int = 10702;
pub const MSP_ERROR_REC_NO_ACTIVE_GRAMMARS: ::std::os::raw::c_int = 10703;
pub const MSP_ERROR_REC_DUPLICATE_GRAMMAR: ::std::os::raw::c_int = 10704;
pub const MSP_ERROR_REC_INVALID_MEDIA_TYPE: ::std::os::raw::c_int = 10705;
pub const MSP_ERROR_REC_INVALID_LANGUAGE: ::std::os::raw::c_int = 10706;
pub const MSP_ERROR_REC_URI_NOT_FOUND: ::std::os::raw::c_int = 10707;
pub const MSP_ERROR_REC_URI_TIMEOUT: ::std::os::raw::c_int = 10708;
pub const MSP_ERROR_REC_URI_FETCH_ERROR: ::std::os::raw::c_int = 10709;
pub const MSP_ERROR_REC_PROC_MOD: ::std::os::raw::c_int = 10710;
pub const MSP_ERROR_EP_GENERAL: ::std::os::raw::c_int = 10800;
pub const MSP_ERROR_EP_NO_SESSION_NAME: ::std::os::raw::c_int = 10801;
pub const MSP_ERROR_EP_INACTIVE: ::std::os::raw::c_int = 10802;
pub const MSP_ERROR_EP_INITIALIZED: ::std::os::raw::c_int = 10803;
pub const MSP_ERROR_TUV_GENERAL: ::std::os::raw::c_int = 10900;
pub const MSP_ERROR_TUV_GETHIDPARAM: ::std::os::raw::c_int = 10901;
pub const MSP_ERROR_TUV_TOKEN: ::std::os::raw::c_int = 10902;
pub const MSP_ERROR_TUV_CFGFILE: ::std::os::raw::c_int = 10903;
pub const MSP_ERROR_TUV_RECV_CONTENT: ::std::os::raw::c_int = 10904;
pub const MSP_ERROR_TUV_VERFAIL: ::std::os::raw::c_int = 10905;
pub const MSP_ERROR_LOGIN_SUCCESS: ::std::os::raw::c_int = 11000;
pub const MSP_ERROR_LOGIN_NO_LICENSE: ::std::os::raw::c_int = 11001;
pub const MSP_ERROR_LOGIN_SESSIONID_INVALID: ::std::os::raw::c_int = 11002;
pub const MSP_ERROR_LOGIN_SESSIONID_ERROR: ::std::os::raw::c_int = 11003;
pub const MSP_ERROR_LOGIN_UNLOGIN: ::std::os::raw::c_int = 11004;
pub const MSP_ERROR_LOGIN_INVALID_USER: ::std::os::raw::c_int = 11005;
pub const MSP_ERROR_LOGIN_INVALID_PWD: ::std::os::raw::c_int = 11006;
pub const MSP_ERROR_LOGIN_SYSTEM_ERROR: ::std::os::raw::c_int = 11099;
pub const MSP_ERROR_HCR_GENERAL: ::std::os::raw::c_int = 11100;
pub const MSP_ERROR_HCR_RESOURCE_NOT_EXIST: ::std::os::raw::c_int = 11101;
pub const MSP_ERROR_HCR_CREATE: ::std::os::raw::c_int = 11102;
pub const MSP_ERROR_HCR_DESTROY: ::std::os::raw::c_int = 11103;
pub const MSP_ERROR_HCR_START: ::std::os::raw::c_int = 11104;
pub const MSP_ERROR_HCR_APPEND_STROKES: ::std::os::raw::c_int = 11105;
pub const MSP_ERROR_HCR_INIT: ::std::os::raw::c_int = 11106;
pub const MSP_ERROR_HCR_POINT_DECODE: ::std::os::raw::c_int = 11107;
pub const MSP_ERROR_HCR_DISPATCH: ::std::os::raw::c_int = 11108;
pub const MSP_ERROR_HCR_GETRESULT: ::std::os::raw::c_int = 11109;
pub const MSP_ERROR_HCR_RESOURCE: ::std::os::raw::c_int = 11110;
pub const MSP_ERROR_AUTH_NO_LICENSE: ::std::os::raw::c_int = 11200;
pub const MSP_ERROR_AUTH_NO_ENOUGH_LICENSE: ::std::os::raw::c_int = 11201;
pub const MSP_ERROR_AUTH_INVALID_LICENSE: ::std::os::raw::c_int = 11202;
pub const MSP_ERROR_AUTH_LICENSE_EXPIRED: ::std::os::raw::c_int = 11203;
pub const MSP_ERROR_AUTH_NEED_MORE_DATA: ::std::os::raw::c_int = 11204;
pub const MSP_ERROR_AUTH_LICENSE_TO_BE_EXPIRED: ::std::os::raw::c_int = 11205;
pub const MSP_ERROR_AUTH_INVALID_MACHINE_ID: ::std::os::raw::c_int = 11206;
pub const MSP_ERROR_AUTH_LOCAL_ASR_FORBIDDEN: ::std::os::raw::c_int = 11207;
pub const MSP_ERROR_AUTH_LOCAL_TTS_FORBIDDEN: ::std::os::raw::c_int = 11208;
pub const MSP_ERROR_AUTH_LOCAL_IVW_FORBIDDEN: ::std::os::raw::c_int = 11209;
pub const MSP_ERROR_AUTH_APPID_NOT_MATCH: ::std::os::raw::c_int = 11210;
pub const MSP_ERROR_AUTH_UID_NOT_MATCH: ::std::os::raw::c_int = 11211;
pub const MSP_ERROR_AUTH_TRIAL_EXPIRED: ::std::os::raw::c_int = 11212;
pub const MSP_ERROR_AUTH_LOCAL_IFD_FORBIDDEN: ::std::os::raw::c_int = 11213;
pub const MSP_ERROR_AIUI_NO_ENOUGH_LICENSE: ::std::os::raw::c_int = 11216;
pub const MSP_ERROR_AUTH_DVC_NO_LICENSE: ::std::os::raw::c_int = 11300;
pub const MSP_ERROR_AUTH_DVC_NO_ENOUGH_LICENSE: ::std::os::raw::c_int = 11301;
pub const MSP_ERROR_AUTH_DVC_INVALID_LICENSE: ::std::os::raw::c_int = 11302;
pub const MSP_ERROR_AUTH_DVC_LICENSE_EXPIRED: ::std::os::raw::c_int = 11303;
pub const MSP_ERROR_AUTH_DVC_NEED_MORE_DATA: ::std::os::raw::c_int = 11304;
pub const MSP_ERROR_AUTH_DVC_LICENSE_TO_BE_EXPIRED: ::std::os::raw::c_int = 11305;
pub const MSP_ERROR_AUTH_DVC_EXCEED_LICENSE: ::std::os::raw::c_int = 11306;
pub const MSP_ERROR_ASE_EXCEP_SILENCE: ::std::os::raw::c_int = 11401;
pub const MSP_ERROR_ASE_EXCEP_SNRATIO: ::std::os::raw::c_int = 11402;
pub const MSP_ERROR_ASE_EXCEP_PAPERDATA: ::std::os::raw::c_int = 11403;
pub const MSP_ERROR_ASE_EXCEP_PAPERCONTENTS: ::std::os::raw::c_int = 11404;
pub const MSP_ERROR_ASE_EXCEP_NOTMONO: ::std::os::raw::c_int = 11405;
pub const MSP_ERROR_ASE_EXCEP_OTHERS: ::std::os::raw::c_int = 11406;
pub const MSP_ERROR_ASE_EXCEP_PAPERFMT: ::std::os::raw::c_int = 11407;
pub const MSP_ERROR_ASE_EXCEP_ULISTWORD: ::std::os::raw::c_int = 11408;
pub const MSP_ERROR_IOT_BASE: ::std::os::raw::c_int = 11500;
pub const MSP_ERROR_IOT_PARAM_ERROR: ::std::os::raw::c_int = 11501;
pub const MSP_ERROR_IOT_INVALID_SERVICE: ::std::os::raw::c_int = 11502;
pub const MSP_ERROR_IOT_INVALID_PRODUCTID: ::std::os::raw::c_int = 11503;
pub const MSP_EEROR_IOT_INVALID_ATTR: ::std::os::raw::c_int = 11504;
pub const MSP_ERROR_IOT_INVALID_PLATFORM: ::std::os::raw::c_int = 11505;
pub const MSP_ERROR_IOT_DID_NOT_FOUND: ::std::os::raw::c_int = 11506;
pub const MSP_ERROR_IVP_GENERAL: ::std::os::raw::c_int = 11600;
pub const MSP_ERROR_IVP_EXTRA_RGN_SOPPORT: ::std::os::raw::c_int = 11601;
pub const MSP_ERROR_IVP_TRUNCATED: ::std::os::raw::c_int = 11602;
pub const MSP_ERROR_IVP_MUCH_NOISE: ::std::os::raw::c_int = 11603;
pub const MSP_ERROR_IVP_TOO_LOW: ::std::os::raw::c_int = 11604;
pub const MSP_ERROR_IVP_ZERO_AUDIO: ::std::os::raw::c_int = 11605;
pub const MSP_ERROR_IVP_UTTER_TOO_SHORT: ::std::os::raw::c_int = 11606;
pub const MSP_ERROR_IVP_TEXT_NOT_MATCH: ::std::os::raw::c_int = 11607;
pub const MSP_ERROR_IVP_NO_ENOUGH_AUDIO: ::std::os::raw::c_int = 11608;
pub const MSP_ERROR_IVP_MODEL_NOT_FOUND_IN_HBASE: ::std::os::raw::c_int = 11610;
pub const MSP_ERROR_IFR_NOT_FACE_IMAGE: ::std::os::raw::c_int = 11700;
pub const MSP_ERROR_FACE_IMAGE_FULL_LEFT: ::std::os::raw::c_int = 11701;
pub const MSP_ERROR_FACE_IMAGE_FULL_RIGHT: ::std::os::raw::c_int = 11702;
pub const MSP_ERROR_IMAGE_CLOCKWISE_WHIRL: ::std::os::raw::c_int = 11703;
pub const MSP_ERROR_IMAGE_COUNTET_CLOCKWISE_WHIRL: ::std::os::raw::c_int = 11704;
pub const MSP_ERROR_VALID_IMAGE_SIZE: ::std::os::raw::c_int = 11705;
pub const MSP_ERROR_ILLUMINATION: ::std::os::raw::c_int = 11706;
pub const MSP_ERROR_FACE_OCCULTATION: ::std::os::raw::c_int = 11707;
pub const MSP_ERROR_FACE_INVALID_MODEL: ::std::os::raw::c_int = 11708;
pub const MSP_ERROR_FUSION_INVALID_INPUT_TYPE: ::std::os::raw::c_int = 11709;
pub const MSP_ERROR_FUSION_NO_ENOUGH_DATA: ::std::os::raw::c_int = 11710;
pub const MSP_ERROR_FUSION_ENOUGH_DATA: ::std::os::raw::c_int = 11711;
pub const MSP_ERROR_AIUI_CID_EXPIRED: ::std::os::raw::c_int = 11800;
pub const MSP_ERROR_ICT_ENCODER: ::std::os::raw::c_int = 11900;
pub const MSP_ERROR_HTTP_BASE: ::std::os::raw::c_int = 12000;
pub const MSP_ERROR_HTTP_400: ::std::os::raw::c_int = 12400;
pub const MSP_ERROR_HTTP_401: ::std::os::raw::c_int = 12401;
pub const MSP_ERROR_HTTP_402: ::std::os::raw::c_int = 12402;
pub const MSP_ERROR_HTTP_403: ::std::os::raw::c_int = 12403;
pub const MSP_ERROR_HTTP_404: ::std::os::raw::c_int = 12404;
pub const MSP_ERROR_HTTP_405: ::std::os::raw::c_int = 12405;
pub const MSP_ERROR_HTTP_406: ::std::os::raw::c_int = 12406;
pub const MSP_ERROR_HTTP_407: ::std::os::raw::c_int = 12407;
pub const MSP_ERROR_HTTP_408: ::std::os::raw::c_int = 12408;
pub const MSP_ERROR_HTTP_409: ::std::os::raw::c_int = 12409;
pub const MSP_ERROR_HTTP_410: ::std::os::raw::c_int = 12410;
pub const MSP_ERROR_HTTP_411: ::std::os::raw::c_int = 12411;
pub const MSP_ERROR_HTTP_412: ::std::os::raw::c_int = 12412;
pub const MSP_ERROR_HTTP_413: ::std::os::raw::c_int = 12413;
pub const MSP_ERROR_HTTP_414: ::std::os::raw::c_int = 12414;
pub const MSP_ERROR_HTTP_415: ::std::os::raw::c_int = 12415;
pub const MSP_ERROR_HTTP_416: ::std::os::raw::c_int = 12416;
pub const MSP_ERROR_HTTP_417: ::std::os::raw::c_int = 12417;
pub const MSP_ERROR_HTTP_500: ::std::os::raw::c_int = 12500;
pub const MSP_ERROR_HTTP_501: ::std::os::raw::c_int = 12501;
pub const MSP_ERROR_HTTP_502: ::std::os::raw::c_int = 12502;
pub const MSP_ERROR_HTTP_503: ::std::os::raw::c_int = 12503;
pub const MSP_ERROR_HTTP_504: ::std::os::raw::c_int = 12504;
pub const MSP_ERROR_HTTP_505: ::std::os::raw::c_int = 12505;
pub const MSP_ERROR_ISV_NO_USER: ::std::os::raw::c_int = 13000;
pub const MSP_ERROR_LUA_BASE: ::std::os::raw::c_int = 14000;
pub const MSP_ERROR_LUA_YIELD: ::std::os::raw::c_int = 14001;
pub const MSP_ERROR_LUA_ERRRUN: ::std::os::raw::c_int = 14002;
pub const MSP_ERROR_LUA_ERRSYNTAX: ::std::os::raw::c_int = 14003;
pub const MSP_ERROR_LUA_ERRMEM: ::std::os::raw::c_int = 14004;
pub const MSP_ERROR_LUA_ERRERR: ::std::os::raw::c_int = 14005;
pub const MSP_ERROR_LUA_INVALID_PARAM: ::std::os::raw::c_int = 14006;
pub const MSP_ERROR_MMP_BASE: ::std::os::raw::c_int = 15000;
pub const MSP_ERROR_MMP_MYSQL_INITFAIL: ::std::os::raw::c_int = 15001;
pub const MSP_ERROR_MMP_REDIS_INITFAIL: ::std::os::raw::c_int = 15002;
pub const MSP_ERROR_MMP_NETDSS_INITFAIL: ::std::os::raw::c_int = 15003;
pub const MSP_ERROR_MMP_TAIR_INITFAIL: ::std::os::raw::c_int = 15004;
pub const MSP_ERROR_MMP_MAIL_SESSION_FAIL: ::std::os::raw::c_int = 15006;
pub const MSP_ERROR_MMP_MAIL_LOGON_FAIL: ::std::os::raw::c_int = 15007;
pub const MSP_ERROR_MMP_MAIL_USER_ILLEGAL: ::std::os::raw::c_int = 15008;
pub const MSP_ERROR_MMP_MAIL_PWD_ERR: ::std::os::raw::c_int = 15009;
pub const MSP_ERROR_MMP_MAIL_SOCKET_ERR: ::std::os::raw::c_int = 15010;
pub const MSP_ERROR_MMP_MAIL_INIT_FAIL: ::std::os::raw::c_int = 15011;
pub const MSP_ERROR_MMP_STORE_MNR_NO_INIT: ::std::os::raw::c_int = 15012;
pub const MSP_ERROR_MMP_STORE_MNR_POOL_FULL: ::std::os::raw::c_int = 15013;
pub const MSP_ERROR_MMP_STRATGY_PARAM_ILLEGAL: ::std::os::raw::c_int = 15014;
pub const MSP_ERROR_MMP_STRATGY_PARAM_TOOLOOG: ::std::os::raw::c_int = 15015;
pub const MSP_ERROR_MMP_PARAM_NULL: ::std::os::raw::c_int = 15016;
pub const MSP_ERROR_MMP_ERR_MORE_TOTAL: ::std::os::raw::c_int = 15017;
pub const MSP_ERROR_MMP_PROC_THRESHOLD: ::std::os::raw::c_int = 15018;
pub const MSP_ERROR_MMP_SERVER_THRESHOLD: ::std::os::raw::c_int = 15019;
pub const MSP_ERROR_MMP_PYTHON_NO_EXIST: ::std::os::raw::c_int = 15020;
pub const MSP_ERROR_MMP_PYTHON_IMPORT_FAILED: ::std::os::raw::c_int = 15021;
pub const MSP_ERROR_MMP_PYTHON_BAD_FUNC: ::std::os::raw::c_int = 15022;
pub const MSP_ERROR_MMP_DB_DATA_ILLEGAL: ::std::os::raw::c_int = 15023;
pub const MSP_ERROR_MMP_REDIS_NOT_CONN: ::std::os::raw::c_int = 15024;
pub const MSP_ERROR_MMP_PMA_NOT_FOUND_STRATEGY: ::std::os::raw::c_int = 15025;
pub const MSP_ERROR_MMP_TAIR_CONNECT: ::std::os::raw::c_int = 15026;
pub const MSP_ERROR_MMP_PMC_SERVINFO_INVALID: ::std::os::raw::c_int = 15027;
pub const MSP_ERROR_MMP_ALARM_GROUP_NULL: ::std::os::raw::c_int = 15028;
pub const MSP_ERROR_MMP_ALARM_CONTXT_NULL: ::std::os::raw::c_int = 15029;
pub const MSP_ERROR_LMOD_BASE: ::std::os::raw::c_int = 16000;
pub const MSP_ERROR_LMOD_NOT_FOUND: ::std::os::raw::c_int = 16001;
pub const MSP_ERROR_LMOD_UNEXPECTED_BIN: ::std::os::raw::c_int = 16002;
pub const MSP_ERROR_LMOD_LOADCODE: ::std::os::raw::c_int = 16003;
pub const MSP_ERROR_LMOD_PRECALL: ::std::os::raw::c_int = 16004;
pub const MSP_ERROR_LMOD_RUNTIME_EXCEPTION: ::std::os::raw::c_int = 16005;
pub const MSP_ERROR_LMOD_ALREADY_LOADED: ::std::os::raw::c_int = 16006;
pub const MSP_ERROR_BIZ_BASE: ::std::os::raw::c_int = 17000;
pub const MSP_ERROR_NGX_LOG_MORE_TOTEL_SIZE: ::std::os::raw::c_int = 18000;
pub const MSP_ERROR_FLASH_NETWORK_CONNECT_FIALED: ::std::os::raw::c_int = 19000;
pub const MSP_ERROR_FLASH_NETWORK_CHECK_FIALED: ::std::os::raw::c_int = 19001;
pub const MSP_ERROR_FLASH_NETWORK_CHECK_TIMEOUT: ::std::os::raw::c_int = 19002;
pub const MSP_ERROR_FLASH_NETWORK_CLOSED_EXCEPTION: ::std::os::raw::c_int = 19003;
pub const SPEECH_ERROR_NO_NETWORK: ::std::os::raw::c_int = 20001;
pub const SPEECH_ERROR_NETWORK_TIMEOUT: ::std::os::raw::c_int = 20002;
pub const SPEECH_ERROR_NET_EXPECTION: ::std::os::raw::c_int = 20003;
pub const SPEECH_ERROR_INVALID_RESULT: ::std::os::raw::c_int = 20004;
pub const SPEECH_ERROR_NO_MATCH: ::std::os::raw::c_int = 20005;
pub const SPEECH_ERROR_AUDIO_RECORD: ::std::os::raw::c_int = 20006;
pub const SPEECH_ERROR_NO_SPPECH: ::std::os::raw::c_int = 20007;
pub const SPEECH_ERROR_SPEECH_TIMEOUT: ::std::os::raw::c_int = 20008;
pub const SPEECH_ERROR_EMPTY_UTTERANCE: ::std::os::raw::c_int = 20009;
pub const SPEECH_ERROR_FILE_ACCESS: ::std::os::raw::c_int = 20010;
pub const SPEECH_ERROR_PLAY_MEDIA: ::std::os::raw::c_int = 20011;
pub const SPEECH_ERROR_INVALID_PARAM: ::std::os::raw::c_int = 20012;
pub const SPEECH_ERROR_TEXT_OVERFLOW: ::std::os::raw::c_int = 20013;
pub const SPEECH_ERROR_INVALID_DATA: ::std::os::raw::c_int = 20014;
pub const SPEECH_ERROR_LOGIN: ::std::os::raw::c_int = 20015;
pub const SPEECH_ERROR_PERMISSION_DENIED: ::std::os::raw::c_int = 20016;
pub const SPEECH_ERROR_INTERRUPT: ::std::os::raw::c_int = 20017;
pub const SPEECH_ERROR_VERSION_LOWER: ::std::os::raw::c_int = 20018;
pub const SPEECH_CLIENT_ERROR_ISUSING: ::std::os::raw::c_int = 20019;
pub const SPEECH_ERROR_SYSTEM_PREINSTALL: ::std::os::raw::c_int = 20020;
pub const SPEECH_ERROR_UNSATISFIED_LINK: ::std::os::raw::c_int = 20021;
pub const SPEECH_ERROR_UNKNOWN: ::std::os::raw::c_int = 20999;
pub const SPEECH_ERROR_COMPONENT_NOT_INSTALLED: ::std::os::raw::c_int = 21001;
pub const SPEECH_ERROR_ENGINE_NOT_SUPPORTED: ::std::os::raw::c_int = 21002;
pub const SPEECH_ERROR_ENGINE_INIT_FAIL: ::std::os::raw::c_int = 21003;
pub const SPEECH_ERROR_ENGINE_CALL_FAIL: ::std::os::raw::c_int = 21004;
pub const SPEECH_ERROR_ENGINE_BUSY: ::std::os::raw::c_int = 21005;
pub const SPEECH_ERROR_LOCAL_NO_INIT: ::std::os::raw::c_int = 22001;
pub const SPEECH_ERROR_LOCAL_RESOURCE: ::std::os::raw::c_int = 22002;
pub const SPEECH_ERROR_LOCAL_ENGINE: ::std::os::raw::c_int = 22003;
pub const SPEECH_ERROR_IVW_INTERRUPT: ::std::os::raw::c_int = 22004;
pub const SPEECH_SUCCESS: ::std::os::raw::c_int = 0;
pub const SPEECH_ERROR_ASR_CLIENT: ::std::os::raw::c_int = 23000;
pub const SPEECH_ERROR_ASR_INVALID_PARA: ::std::os::raw::c_int = 23001;
pub const SPEECH_ERROR_ASR_INVALID_PARA_VALUE: ::std::os::raw::c_int = 23002;
pub const SPEECH_ERROR_ASR_OUT_OF_MEMORY: ::std::os::raw::c_int = 23003;
pub const SPEECH_ERROR_ASR_CREATE_HANDLE_FAILED: ::std::os::raw::c_int = 23004;
pub const SPEECH_ERROR_ASR_ENGINE_INIT_FAILED: ::std::os::raw::c_int = 23005;
pub const SPEECH_ERROR_ASR_ENGINE_STARTED: ::std::os::raw::c_int = 23006;
pub const SPEECH_ERROR_ASR_ENGINE_UNINIT: ::std::os::raw::c_int = 23007;
pub const SPEECH_ERROR_ASR_SPEECH_TIMEOUT: ::std::os::raw::c_int = 23008;
pub const SPEECH_ERROR_ASR_NO_RECOGNIZED_RESULT: ::std::os::raw::c_int = 23009;
pub const SPEECH_ERROR_ASR_INVALID_HANDLE: ::std::os::raw::c_int = 23010;
pub const SPEECH_ERROR_ASR_FILE_ACCESS: ::std::os::raw::c_int = 23011;
pub const SPEECH_ERROR_AITALK_FALSE: ::std::os::raw::c_int = 23100;
pub const SPEECH_ERROR_AITALK_PERMISSION_DENIED: ::std::os::raw::c_int = 23101;
pub const SPEECH_ERROR_AITALK_INVALID_PARA: ::std::os::raw::c_int = 23102;
pub const SPEECH_ERROR_AITALK_BUFFER_OVERFLOW: ::std::os::raw::c_int = 23103;
pub const SPEECH_ERROR_AITALK_FAILED: ::std::os::raw::c_int = 23104;
pub const SPEECH_ERROR_AITALK_NOT_SUPPORTED: ::std::os::raw::c_int = 23105;
pub const SPEECH_ERROR_AITALK_OUT_OF_MEMORY: ::std::os::raw::c_int = 23106;
pub const SPEECH_ERROR_AITALK_INVALID_RESOURCE: ::std::os::raw::c_int = 23107;
pub const SPEECH_ERROR_AITALK_NOT_FOUND: ::std::os::raw::c_int = 23108;
pub const SPEECH_ERROR_AITALK_INVALID_GRAMMAR: ::std::os::raw::c_int = 23109;
pub const SPEECH_ERROR_AITALK_INVALID_CALL: ::std::os::raw::c_int = 23110;
pub const SPEECH_ERROR_AITALK_SYNTAX_ERROR: ::std::os::raw::c_int = 23111;
pub const SPEECH_ERROR_AITALK_RESET: ::std::os::raw::c_int = 23112;
pub const SPEECH_ERROR_AITALK_ENDED: ::std::os::raw::c_int = 23113;
pub const SPEECH_ERROR_AITALK_IDLE: ::std::os::raw::c_int = 23114;
pub const SPEECH_ERROR_AITALK_CANNOT_SAVE_FILE: ::std::os::raw::c_int = 23115;
pub const SPEECH_ERROR_AITALK_INVALID_GRAMMAR_NAME: ::std::os::raw::c_int = 23116;
pub const SPEECH_ERROR_AITALK_BUFFER_EMPTY: ::std::os::raw::c_int = 23117;
pub const SPEECH_ERROR_AITALK_GET_RESULT: ::std::os::raw::c_int = 23118;
pub const SPEECH_ERROR_AITALK_REACT_OUT_TIME: ::std::os::raw::c_int = 23119;
pub const SPEECH_ERROR_AITALK_SPEECH_OUT_TIME: ::std::os::raw::c_int = 23120;
pub const SPEECH_ERROR_AITALK_AUDIO_CUT: ::std::os::raw::c_int = 23121;
pub const SPEECH_ERROR_AITALK_AUDIO_LOWER: ::std::os::raw::c_int = 23122;
pub const SPEECH_ERROR_AITALK_INSUFFICIENT_PERMISSIONS: ::std::os::raw::c_int = 23123;
pub const SPEECH_ERROR_AITALK_RESULT_ERROR: ::std::os::raw::c_int = 23124;
pub const SPEECH_ERROR_AITALK_SHORT_PAUSE: ::std::os::raw::c_int = 23125;
pub const SPEECH_ERROR_AITALK_BUSY: ::std::os::raw::c_int = 23126;
pub const SPEECH_ERROR_AITALK_GRM_NOT_UPDATE: ::std::os::raw::c_int = 23127;
pub const SPEECH_ERROR_AITALK_STARTED: ::std::os::raw::c_int = 23128;
pub const SPEECH_ERROR_AITALK_STOPPED: ::std::os::raw::c_int = 23129;
pub const SPEECH_ERROR_AITALK_ALREADY_STARTED: ::std::os::raw::c_int = 23130;
pub const SPEECH_ERROR_AITALK_ALREADY_STOPPED: ::std::os::raw::c_int = 23131;
pub const SPEECH_ERROR_AITALK_TOO_MANY_COMMAND: ::std::os::raw::c_int = 23132;
pub const SPEECH_ERROR_AITALK_WAIT: ::std::os::raw::c_int = 23133;
pub const SPEECH_ERROR_AITALK_MAE_RIGHT: ::std::os::raw::c_int = 23134;
pub const SPEECH_ERROR_AITALK_MAE_WRONG: ::std::os::raw::c_int = 23135;
pub const SPEECH_ERROR_AITALK_GRM_ERR: ::std::os::raw::c_int = 23300;
pub const SPEECH_ERROR_TTS_INVALID_PARA: ::std::os::raw::c_int = 24000;
pub const SPEECH_ERROR_TTS_INVALID_PARA_VALUE: ::std::os::raw::c_int = 24001;
pub const SPEECH_ERROR_TTS_OUT_OF_MEMORY: ::std::os::raw::c_int = 24002;
pub const SPEECH_ERROR_TTS_INVALID_HANDLE: ::std::os::raw::c_int = 24003;
pub const SPEECH_ERROR_TTS_CREATE_HANDLE_FAILED: ::std::os::raw::c_int = 24004;
pub const SPEECH_ERROR_TTS_INVALID_RESOURCE: ::std::os::raw::c_int = 24005;
pub const SPEECH_ERROR_TTS_INVALID_VOICE_NAME: ::std::os::raw::c_int = 24006;
pub const SPEECH_ERROR_TTS_ENGINE_UNINIT: ::std::os::raw::c_int = 24007;
pub const SPEECH_ERROR_TTS_ENGINE_INIT_FAILED: ::std::os::raw::c_int = 24008;
pub const SPEECH_ERROR_TTS_ENGINE_BUSY: ::std::os::raw::c_int = 24009;
pub const SPEECH_ERROR_AISOUND_BASE: ::std::os::raw::c_int = 24100;
pub const SPEECH_ERROR_AISOUND_UNIMPEMENTED: ::std::os::raw::c_int = 24100;
pub const SPEECH_ERROR_AISOUND_UNSUPPORTED: ::std::os::raw::c_int = 24101;
pub const SPEECH_ERROR_AISOUND_INVALID_HANDLE: ::std::os::raw::c_int = 24102;
pub const SPEECH_ERROR_AISOUND_INVALID_PARA: ::std::os::raw::c_int = 24103;
pub const SPEECH_ERROR_AISOUND_INSUFFICIENT_HEAP: ::std::os::raw::c_int = 24104;
pub const SPEECH_ERROR_AISOUND_STATE_REFUSE: ::std::os::raw::c_int = 24105;
pub const SPEECH_ERROR_AISOUND_INVALID_PARA_ID: ::std::os::raw::c_int = 24106;
pub const SPEECH_ERROR_AISOUND_INVALID_PARA_VALUE: ::std::os::raw::c_int = 24107;
pub const SPEECH_ERROR_AISOUND_RESOURCE: ::std::os::raw::c_int = 24108;
pub const SPEECH_ERROR_AISOUND_RESOURCE_READ: ::std::os::raw::c_int = 24109;
pub const SPEECH_ERROR_AISOUND_LBENDIAN: ::std::os::raw::c_int = 24110;
pub const SPEECH_ERROR_AISOUND_HEADFILE: ::std::os::raw::c_int = 24111;
pub const SPEECH_ERROR_AISOUND_BUFFER_OVERFLOW: ::std::os::raw::c_int = 24112;
pub const SPEECH_ERROR_AISOUND_INVALID_ISAMPA: ::std::os::raw::c_int = 24113;
pub const SPEECH_ERROR_AISOUND_INVALID_CSSML: ::std::os::raw::c_int = 24114;
pub const SPEECH_ERROR_IVW_ENGINE_UNINI: ::std::os::raw::c_int = 25000;
pub const SPEECH_ERROR_IVW_RESVER_NOMATCH: ::std::os::raw::c_int = 25001;
pub const SPEECH_ERROR_IVW_BUFFERED_AUDIOD_LITTLE: ::std::os::raw::c_int = 25002;
pub const SPEECH_ERROR_IVW_INVALID_RESTYPE: ::std::os::raw::c_int = 25003;
pub const SPEECH_ERROR_IVW_INVALID_RESHEADVER: ::std::os::raw::c_int = 25004;
pub const SPEECH_ERROR_IVW_INVALID_CALL: ::std::os::raw::c_int = 25101;
pub const SPEECH_ERROR_IVW_INVALID_ARG: ::std::os::raw::c_int = 25102;
pub const SPEECH_ERROR_IVW_TELL_SIZE: ::std::os::raw::c_int = 25103;
pub const SPEECH_ERROR_IVW_OUT_OF_MEMORY: ::std::os::raw::c_int = 25104;
pub const SPEECH_ERROR_IVW_OUT_BUFFER_FULL: ::std::os::raw::c_int = 25105;
pub const SPEECH_ERROR_IVW_OUT_BUFFER_EMPTY: ::std::os::raw::c_int = 25106;
pub const SPEECH_ERROR_IVW_INVALID_RESOURCE: ::std::os::raw::c_int = 25107;
pub const SPEECH_ERROR_IVW_REPETITIOPN_ENTER: ::std::os::raw::c_int = 25108;
pub const SPEECH_ERROR_IVW_NOT_SUPPORT: ::std::os::raw::c_int = 25109;
pub const SPEECH_ERROR_IVW_NOT_FOUND: ::std::os::raw::c_int = 25110;
pub const SPEECH_ERROR_IVW_INVALID_SN: ::std::os::raw::c_int = 25111;
pub const SPEECH_ERROR_IVW_LIMITTED: ::std::os::raw::c_int = 25112;
pub const SPEECH_ERROR_IVW_TIME_OUT: ::std::os::raw::c_int = 25113;
pub const SPEECH_ERROR_IVW_ENROLL1_SUCESS: ::std::os::raw::c_int = 25114;
pub const SPEECH_ERROR_IVW_ENROLL1_FAILED: ::std::os::raw::c_int = 25115;
pub const SPEECH_ERROR_IVW_ENROLL2_SUCESS: ::std::os::raw::c_int = 25116;
pub const SPEECH_ERROR_IVW_ENROLL2_FAILED: ::std::os::raw::c_int = 25117;
pub const SPEECH_ERROR_IVW_ENROLL3_SUCESS: ::std::os::raw::c_int = 25118;
pub const SPEECH_ERROR_IVW_ENROLL3_FAILED: ::std::os::raw::c_int = 25119;
pub const SPEECH_ERROR_IVW_SPEECH_TOO_SHORT: ::std::os::raw::c_int = 25120;
pub const SPEECH_ERROR_IVW_SPEECH_STOP: ::std::os::raw::c_int = 25121;
pub const SPEECH_ERROR_LFASR_BASE: ::std::os::raw::c_int = 26000;
pub type _bindgen_ty_8 = ::std::os::raw::c_int;
extern "C" {
    #[doc = " @fn\t\tQISESessionBegin"]
    #[doc = " @brief\tBegin a Evaluation Session"]
    #[doc = ""]
    #[doc = "  Create a evaluation session to evaluate audio data"]
    #[doc = ""]
    #[doc = " @return\tconst char* MSPAPI\t\t- Return the new session id in success, otherwise return NULL."]
    #[doc = " @param\tconst char* params\t\t- [in] Parameters to create session."]
    #[doc = " @param\tconst char* userModelId\t- [in] user model id."]
    #[doc = " @param\tint *errorCode\t\t\t- [out] Return 0 in success, otherwise return error code."]
    #[doc = " @see"]
    pub fn QISESessionBegin(
        params: *const ::std::os::raw::c_char,
        userModelId: *const ::std::os::raw::c_char,
        errorCode: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
pub type Proc_QISESessionBegin = ::std::option::Option<
    unsafe extern "C" fn(
        params: *const ::std::os::raw::c_char,
        userModelID: *const ::std::os::raw::c_char,
        errorCode: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char,
>;
extern "C" {
    #[doc = " @fn\t\tQISEPaperCheck"]
    #[doc = " @brief\tPaper Check"]
    #[doc = ""]
    #[doc = "  Checking the papaer ."]
    #[doc = ""]
    #[doc = " @return\tint MSPAPI\t\t\t\t- Return 0 in success, otherwise return error code."]
    #[doc = " @param\tvoid *data\t- [in] Text buffer."]
    #[doc = " @param\tunsigned int* dataLen\t- [in] Text length in bytes,[out] Length of result returned"]
    #[doc = " @param\tconst char* params\t\t- [in] Parameters describing the text."]
    #[doc = " @see"]
    pub fn QISEPaperCheck(
        data: *mut ::std::os::raw::c_void,
        dataLen: *mut ::std::os::raw::c_uint,
        params: *const ::std::os::raw::c_char,
        errorCode: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @fn\t\tQISETextPut"]
    #[doc = " @brief\tPut Text"]
    #[doc = ""]
    #[doc = "  Writing text string to evaluator."]
    #[doc = ""]
    #[doc = " @return\tint MSPAPI\t\t\t\t- Return 0 in success, otherwise return error code."]
    #[doc = " @param\tconst char* sessionID\t- [in] The session id returned by QISESessionBegin."]
    #[doc = " @param\tconst char* textString\t- [in] Text buffer."]
    #[doc = " @param\tunsigned int textLen\t- [in] Text length in bytes."]
    #[doc = " @param\tconst char* params\t\t- [in] Parameters describing the text."]
    #[doc = " @see"]
    pub fn QISETextPut(
        sessionID: *const ::std::os::raw::c_char,
        textString: *const ::std::os::raw::c_char,
        textLen: ::std::os::raw::c_uint,
        params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type Proc_QISETextPut = ::std::option::Option<
    unsafe extern "C" fn(
        sessionID: *const ::std::os::raw::c_char,
        textString: *const ::std::os::raw::c_char,
        textLen: ::std::os::raw::c_uint,
        params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[doc = " @fn\t\tQISEAudioWrite"]
    #[doc = " @brief\tWrite Audio"]
    #[doc = ""]
    #[doc = "  Writing binary audio data to evaluator."]
    #[doc = ""]
    #[doc = " @return\tint MSPAPI\t\t\t\t- Return 0 in success, otherwise return error code."]
    #[doc = " @param\tconst char* sessionID\t- [in] The session id returned by QISESessionBegin."]
    #[doc = " @param\tconst void* waveData\t- [in] Audio data to write."]
    #[doc = " @param\tunsigned int waveLen\t- [in] Audio length in bytes."]
    #[doc = " @param\tint audioStatus\t\t\t- [in] Audio status."]
    #[doc = " @param\tint *epStatus\t\t\t- [out] EP or vad status."]
    #[doc = " @param\tint *evlStatus\t\t\t- [out] Status of evaluation result, 0: success, 1: no match, 2: incomplete, 5:speech complete."]
    #[doc = " @see"]
    pub fn QISEAudioWrite(
        sessionID: *const ::std::os::raw::c_char,
        waveData: *const ::std::os::raw::c_void,
        waveLen: ::std::os::raw::c_uint,
        audioStatus: ::std::os::raw::c_int,
        epStatus: *mut ::std::os::raw::c_int,
        Status: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type Proc_QISEAudioWrite = ::std::option::Option<
    unsafe extern "C" fn(
        sessionID: *const ::std::os::raw::c_char,
        waveData: *const ::std::os::raw::c_void,
        waveLen: ::std::os::raw::c_uint,
        audioStatus: ::std::os::raw::c_int,
        epStatus: *mut ::std::os::raw::c_int,
        recogStatus: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[doc = " @fn\t\tQISEGetResult"]
    #[doc = " @brief\tGet Evaluation Result"]
    #[doc = ""]
    #[doc = "  Get evaluation result."]
    #[doc = ""]
    #[doc = " @return\tint MSPAPI\t\t\t\t- Return 0 in success, otherwise return error code."]
    #[doc = " @param\tconst char* sessionID\t- [in] The session id returned by QISESessionBegin."]
    #[doc = " @param\tint* rsltLen\t\t\t- [out] Length of result returned."]
    #[doc = " @param\tint* rsltStatus\t\t\t- [out] Status of evaluation result returned."]
    #[doc = " @param\tint* errorCode\t\t\t- [out] Return 0 in success, otherwise return error code."]
    #[doc = " @see"]
    pub fn QISEGetResult(
        sessionID: *const ::std::os::raw::c_char,
        rsltLen: *mut ::std::os::raw::c_uint,
        rsltStatus: *mut ::std::os::raw::c_int,
        errorCode: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
pub type Proc_QISEGetResult = ::std::option::Option<
    unsafe extern "C" fn(
        sessionID: *const ::std::os::raw::c_char,
        rsltLen: *mut ::std::os::raw::c_uint,
        rsltStatus: *mut ::std::os::raw::c_int,
        errorCode: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char,
>;
extern "C" {
    #[doc = " @fn\t\tQISEResultInfo"]
    #[doc = " @brief\tGet Result Info"]
    #[doc = ""]
    #[doc = "  Get info of evaluation result."]
    #[doc = ""]
    #[doc = " @return\tconst char *\t\t\t- The session id returned by QISESessionBegin."]
    #[doc = " @param\tconst char* sessionID\t- [in] session id returned by QISESessionBegin."]
    #[doc = " @see"]
    pub fn QISEResultInfo(
        sessionID: *const ::std::os::raw::c_char,
        errorCode: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
pub type Proc_QISEResultInfo = ::std::option::Option<
    unsafe extern "C" fn(
        sessionID: *const ::std::os::raw::c_char,
        errorCode: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char,
>;
extern "C" {
    #[doc = " @fn\t\tQISESessionEnd"]
    #[doc = " @brief\tEnd a ISR Session"]
    #[doc = ""]
    #[doc = "  End a evaluation session, release all resource."]
    #[doc = ""]
    #[doc = " @return\tint MSPAPI\t\t\t\t- Return 0 in success, otherwise return error code."]
    #[doc = " @param\tconst char* sessionID\t- [in] The session id returned by QISESessionBegin."]
    #[doc = " @param\tconst char* hints\t\t- [in] Reason to end current session."]
    #[doc = " @see"]
    pub fn QISESessionEnd(
        sessionID: *const ::std::os::raw::c_char,
        hints: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type Proc_QISESessionEnd = ::std::option::Option<
    unsafe extern "C" fn(
        sessionID: *const ::std::os::raw::c_char,
        hints: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[doc = " @fn\t\tQISEGetParam"]
    #[doc = " @brief\tget params related with msc"]
    #[doc = ""]
    #[doc = "  the params could be local or server param, we only support netflow params \"upflow\" & \"downflow\" now"]
    #[doc = ""]
    #[doc = " @return\tint\tMSPAPI\t\t\t\t- Return 0 in success, otherwise return error code."]
    #[doc = " @param\tconst char* sessionID\t- [in] session id of related param, set NULL to got global param"]
    #[doc = " @param\tconst char* paramName\t- [in] param name,could pass more than one param splited by ',' ';' or '\\n'."]
    #[doc = " @param\tconst char* paramValue\t- [in] param value buffer, malloced by user."]
    #[doc = " @param\tint *valueLen\t\t\t- [in, out] in: length of value buffer, out: length of value string."]
    #[doc = " @see"]
    pub fn QISEGetParam(
        sessionID: *const ::std::os::raw::c_char,
        paramName: *const ::std::os::raw::c_char,
        paramValue: *mut ::std::os::raw::c_char,
        valueLen: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type Proc_QISEGetParam = ::std::option::Option<
    unsafe extern "C" fn(
        sessionID: *const ::std::os::raw::c_char,
        paramName: *const ::std::os::raw::c_char,
        paramValue: *mut ::std::os::raw::c_char,
        valueLen: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[doc = " @fn\t\tQTTSSessionBegin"]
    #[doc = " @brief\tBegin a TTS Session"]
    #[doc = ""]
    #[doc = "  Create a tts session to synthesize data."]
    #[doc = ""]
    #[doc = " @return\tconst char* - Return the new session id in success, otherwise return NULL, error code."]
    #[doc = " @param\tconst char* params\t\t\t- [in] parameters when the session created."]
    #[doc = " @param\tconst char** sessionID\t\t- [out] return a string to this session."]
    #[doc = " @see"]
    pub fn QTTSSessionBegin(
        params: *const ::std::os::raw::c_char,
        errorCode: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
pub type Proc_QTTSSessionBegin = ::std::option::Option<
    unsafe extern "C" fn(
        params: *const ::std::os::raw::c_char,
        errorCode: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char,
>;
extern "C" {
    #[doc = " @fn\t\tQTTSTextPut"]
    #[doc = " @brief\tPut Text Buffer to TTS Session"]
    #[doc = ""]
    #[doc = "  Writing text string to synthesizer."]
    #[doc = ""]
    #[doc = " @return\tint MSPAPI\t- Return 0 in success, otherwise return error code."]
    #[doc = " @param\tconst char* sessionID\t- [in] The session id returned by sesson begin"]
    #[doc = " @param\tconst char* textString\t- [in] text buffer"]
    #[doc = " @param\tunsigned int textLen\t- [in] text size in bytes"]
    #[doc = " @see"]
    pub fn QTTSTextPut(
        sessionID: *const ::std::os::raw::c_char,
        textString: *const ::std::os::raw::c_char,
        textLen: ::std::os::raw::c_uint,
        params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type Proc_QTTSTextPut = ::std::option::Option<
    unsafe extern "C" fn(
        sessionID: *const ::std::os::raw::c_char,
        textString: *const ::std::os::raw::c_char,
        textLen: ::std::os::raw::c_uint,
        params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[doc = " @fn\t\tQTTSAudioGet"]
    #[doc = " @brief\tSynthesize text to audio"]
    #[doc = ""]
    #[doc = "  Synthesize text to audio, and return audio information."]
    #[doc = ""]
    #[doc = " @return\tconst void*\t- Return current synthesized audio data buffer, size returned by QTTSTextSynth."]
    #[doc = " @param\tconst char* sessionID\t- [in] session id returned by session begin"]
    #[doc = " @param\tunsigned int* audioLen \t- [out] synthesized audio size in bytes"]
    #[doc = " @param\tint* synthStatus\t- [out] synthesizing status"]
    #[doc = " @param\tint* errorCode\t- [out] error code if failed, 0 to success."]
    #[doc = " @see"]
    pub fn QTTSAudioGet(
        sessionID: *const ::std::os::raw::c_char,
        audioLen: *mut ::std::os::raw::c_uint,
        synthStatus: *mut ::std::os::raw::c_int,
        errorCode: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_void;
}
pub type Proc_QTTSAudioGet = ::std::option::Option<
    unsafe extern "C" fn(
        sessionID: *const ::std::os::raw::c_char,
        audioLen: *mut ::std::os::raw::c_uint,
        synthStatus: *mut ::std::os::raw::c_int,
        errorCode: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_void,
>;
extern "C" {
    #[doc = " @fn\t\tQTTSAudioInfo"]
    #[doc = " @brief\tGet Synthesized Audio information"]
    #[doc = ""]
    #[doc = "  Get synthesized audio data information."]
    #[doc = ""]
    #[doc = " @return\tconst char * - Return audio info string."]
    #[doc = " @param\tconst char* sessionID\t- [in] session id returned by session begin"]
    #[doc = " @see"]
    pub fn QTTSAudioInfo(sessionID: *const ::std::os::raw::c_char)
        -> *const ::std::os::raw::c_char;
}
pub type Proc_QTTSAudioInfo = ::std::option::Option<
    unsafe extern "C" fn(sessionID: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char,
>;
extern "C" {
    #[doc = " @fn\t\tQTTSSessionEnd"]
    #[doc = " @brief\tEnd a Recognizer Session"]
    #[doc = ""]
    #[doc = "  End the recognizer session, release all resource."]
    #[doc = ""]
    #[doc = " @return\tint MSPAPI\t- Return 0 in success, otherwise return error code."]
    #[doc = " @param\tconst char* session_id\t- [in] session id string to end"]
    #[doc = " @param\tconst char* hints\t- [in] user hints to end session, hints will be logged to CallLog"]
    #[doc = " @see"]
    pub fn QTTSSessionEnd(
        sessionID: *const ::std::os::raw::c_char,
        hints: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type Proc_QTTSSessionEnd = ::std::option::Option<
    unsafe extern "C" fn(
        sessionID: *const ::std::os::raw::c_char,
        hints: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[doc = " @fn\t\tQTTSGetParam"]
    #[doc = " @brief\tget params related with msc"]
    #[doc = ""]
    #[doc = "  the params could be local or server param, we only support netflow params \"upflow\" & \"downflow\" now"]
    #[doc = ""]
    #[doc = " @return\tint\t- Return 0 if success, otherwise return errcode."]
    #[doc = " @param\tconst char* sessionID\t- [in] session id of related param, set NULL to got global param"]
    #[doc = " @param\tconst char* paramName\t- [in] param name,could pass more than one param split by ','';'or'\\n'"]
    #[doc = " @param\tconst char* paramValue\t- [in] param value buffer, malloced by user"]
    #[doc = " @param\tint *valueLen\t\t\t- [in, out] pass in length of value buffer, and return length of value string"]
    #[doc = " @see"]
    pub fn QTTSGetParam(
        sessionID: *const ::std::os::raw::c_char,
        paramName: *const ::std::os::raw::c_char,
        paramValue: *mut ::std::os::raw::c_char,
        valueLen: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type Proc_QTTSGetParam = ::std::option::Option<
    unsafe extern "C" fn(
        sessionID: *const ::std::os::raw::c_char,
        paramName: *const ::std::os::raw::c_char,
        paramValue: *mut ::std::os::raw::c_char,
        valueLen: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[doc = " @fn\t\tQTTSSetParam"]
    #[doc = " @brief\tset params related with msc"]
    #[doc = ""]
    #[doc = "  the params could be local or server param, we only support netflow params \"upflow\" & \"downflow\" now"]
    #[doc = ""]
    #[doc = " @return\tint\t- Return 0 if success, otherwise return errcode."]
    #[doc = " @param\tconst char* sessionID\t- [in] session id of related param, set NULL to got global param"]
    #[doc = " @param\tconst char* paramName\t- [in] param name,could pass more than one param split by ','';'or'\\n'"]
    #[doc = " @param\tconst char* paramValue\t- [in] param value buffer, malloced by user"]
    #[doc = " @see"]
    pub fn QTTSSetParam(
        sessionID: *const ::std::os::raw::c_char,
        paramName: *const ::std::os::raw::c_char,
        paramValue: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type Proc_QTTSSetParam = ::std::option::Option<
    unsafe extern "C" fn(
        sessionID: *const ::std::os::raw::c_char,
        paramName: *const ::std::os::raw::c_char,
        paramValue: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type tts_result_ntf_handler = ::std::option::Option<
    unsafe extern "C" fn(
        sessionID: *const ::std::os::raw::c_char,
        audio: *const ::std::os::raw::c_char,
        audioLen: ::std::os::raw::c_int,
        synthStatus: ::std::os::raw::c_int,
        ced: ::std::os::raw::c_int,
        audioInfo: *const ::std::os::raw::c_char,
        audioInfoLen: ::std::os::raw::c_int,
        userData: *mut ::std::os::raw::c_void,
    ),
>;
pub type tts_status_ntf_handler = ::std::option::Option<
    unsafe extern "C" fn(
        sessionID: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        status: ::std::os::raw::c_int,
        param1: ::std::os::raw::c_int,
        param2: *const ::std::os::raw::c_void,
        userData: *mut ::std::os::raw::c_void,
    ),
>;
pub type tts_error_ntf_handler = ::std::option::Option<
    unsafe extern "C" fn(
        sessionID: *const ::std::os::raw::c_char,
        errorCode: ::std::os::raw::c_int,
        detail: *const ::std::os::raw::c_char,
        userData: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn QTTSRegisterNotify(
        sessionID: *const ::std::os::raw::c_char,
        rsltCb: tts_result_ntf_handler,
        statusCb: tts_status_ntf_handler,
        errCb: tts_error_ntf_handler,
        userData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
